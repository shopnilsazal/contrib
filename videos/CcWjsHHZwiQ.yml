# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - functional
title: 'What Do We Do With 10^12 Transistors?  The Case For Precision Timing'
recordingDate: 1203677320
description: "Google Tech Talks\nFebruary, 21 2008\n\nABSTRACT\n\nIt is will be too costly to design many of these chips at the polygon\nor even gate level, so they must be highly programmable. Furthermore,\nthey should not just be FPGAs as we now know them because with that\nmany transistors, we should specialize more for power efficiency. I\nenvision FPGA-like chips where the computational elements combine CPUs\nwith more traditional FPGA-like fabrics.\n\nFor embedded real-time applications, which I argue will dominate, I\nargue that the temporal behavior of these processors should be as easy\nto analyze and control as their functional behavior.\n\nI present a vision such a precision-timed (PRET) processor, which\nincorporates a variety of techniques. At the ISA level, it provides\ncycle-accurate timers, a predictable memory hierarchy based on\nscratchpad memories, and an interleaved pipeline that provides\npredictable, hardware-efficient concurrency. It will be programmed in\na C-like language that includes user-specified timing constraints and\nconcurrency, perhaps with synchronous semantics. Both compile- and\nrun-time checks will ensure the program meets timing constraints,\nsimilar to array bounds checking.\n\nSpeaker: Stephen A. Edwards\nStephen A. Edwards received the B.S. degree in Electrical Engineering\nfrom the California Institute of Technology in 1992, and the M.S. and\nPh.D degrees, also in Electrical Engineering, from the University of\nCalifornia, Berkeley in 1994 and 1997 respectively. He is currently\nan associate professor in the Computer Science Department of Columbia\nUniversity in New York, which he joined in 2001 after a three-year\nstint with Synopsys, Inc., in Mountain View, California. His research\ninterests include embedded system design, domain-specific languages,\nand compilers."
