# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - unix
    - containers
    - security
    - testing
    - python
title: 'Alex Willmer - CloudABI: Capability based security on Linux/Unix'
recordingDate: 1469951781
description: "Alex Willmer - CloudABI: Capability based security on Linux/Unix\n[EuroPython 2016]\n[19 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/capability-based-security-on-unix-with-cloudabi)\n\nTake POSIX, add capability-based security, then remove anything that\nconflicts. The result is CloudABI, available for BSD, Linux, OSX et\nal.\n\nA CloudABI process is incapable of any action that has a global impact\nIt can only affect the file descriptors you provide. As a result even\nunknown binaries can safely be executed - without the need for\ncontainers, virtual machines, or other sandboxes.\n\nThis talk will introduce CloudABI, how to use it with Python, the\nbenefits, and the trade-offs.\n\n-----\n\n[CloudABI](https://nuxi.nl/) is a new POSIX based computing environment that brings [capability-based security](https://en.wikipedia.org/wiki/Capability-based_security) to BSD, Linux, OSX et al.\n\nUnlike traditional Unix, if a CloudABI process goes rogue it _cannot_\nexecute random binaries, or read arbitrary files. This is achieved by\nremoving `open()` & any other API able to acquire global resources.\nInstead a CloudABI process must be granted _capabilities_ to specific\nresources (e.g. directories, files, sockets) in the form of file\ndescriptors. If a process only has a descriptor for `/var/www` then\nit's _incapable_ of affecting any file or folder outside that\ndirectory.\n\nThis talk will\n\n - Review the security & reusability problems of Linux & Unix processes\n - Introduce capability-based security\n - Summarize the design of CloudABI - its benefits & trade-offs\n - Demonstrate how to write Python software for CloudABI & run it\n - Point out the pitfalls & gotchas to be aware of\n - Discuss the current & future status of CloudABI\n\nCloudABI began life on FreeBSD. It also runs DragonFly BSD, NetBSD,\nPC-BSD, Arch Linux, Debian, Ubuntu, & OS X. The API & ABI are kernel\nagnostic - a CloudABI binary can run on any supported kernel. The\ndesign is evolved from\n[Capsicum](https://www.cl.cam.ac.uk/research/security/capsicum/), a\nlibrary that allows processes to drop access to undesired syscalls at\nruntime. CloudABI applies this at build time to make testing & lock-\ndown easier."
