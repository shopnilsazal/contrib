# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - testing
    - craftsmanship
    - 'code design'
    - tdd
    - architecture
    - python
title: 'Test-Driven Repair by Christopher Neugebauer'
recordingDate: 1438658620
description: "“it is impossible BY DEFINITION to do Test-Driven Development after the code is written.” — Tim Ottinger, author of ‘Clean Code’, on Twitter [1].\r\n\r\nAutomated testing is one of the most important tools in the modern programming toolbox: good tests help you find regressions early, and help you make sure your code is right before it ships. Test-driven development is a great way to make sure your software is up to specification before you start work. Even better, it makes sure your software’s architecture is amenable to writing tests from day 1.\r\n\r\nSo what happens when you find yourself working on code where automated testing took a back seat to being shipped? Chances are you’ll have a sea of bugs, strung together in a structure where writing simple unit tests just isn’t going to happen.\r\n\r\nBroken code is a support burden, and if it’s in production, you’ve got no choice but to make things work. Luckily, automated testing isn’t a lost cause here!\r\n\r\nIn this talk, we’ll look at how to approach automated testing on late-stage, or even production code… or in any situation when you don’t have the luxury of starting with a test-driven structure. We’ll look at techniques that I’ve used to analyse faults in existing code, and how to translate those into tests, and how to use that to fix bugs.\r\n\r\nIn particular, we’ll look at:\r\n\r\n- Tooling and metrics to help you decide what code to test, and how to measure progress when you’re writing tests\r\n- Approaches to constructing test cases for old code, including using data-driven approaches, and approaches based on requirements specifications\r\n- Granularity — making tests on old code granular enough is difficult, so we’ll look at the trade-offs between unit and integration tests on old code, and ways to make integration-level tests granular enough to make results reliable\r\n\r\nWe’ll see that testing old code is both achievable, and actually a worthwhile exercise. You’ll find bugs. You’ll increase quality. You’ll make your code more maintainable! Do try it!\r\n\r\n[1] https://twitter.com/tottinge/status/544632253205475329\r\n\n\nPyCon Australia is the national conference for users of the Python Programming Language. In 2015, we're heading to Brisbane to bring together students, enthusiasts, and professionals with a love of Python from around Australia, and all around the World. \n\nJuly 31-August 4, Brisbane, Queensland, Australia"
