# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - performance
    - web
    - python
title: 'Roberto Polli - Statistics 101 for System Administrators'
recordingDate: 1410633538
description: "Roberto Polli - Statistics 101 for System Administrators\n[EuroPython 2014]\n[22 July 2014]\n\nPython allows every sysadmin to run  (and learn) basic statistics on system data, replacing sed, awk, bc and gnuplot with an unique, reusable and interactive framework.\nThe talk is a case study where python allowed us to highlight some network performance points in minutes using itertools, scipy and matplotlib.\nThe presentation includes code snippets and a brief plot discussion.\n\n-----\n\n#Statistics 101 for System Administrators\n\n## Agenda\n * A latency issue\n * Data distribution\n * 30 seconds correlation with pearsonr\n * Combinating data\n * Plotting and the power of color\n\n## An use case \n - Network latency issues\n - Correlate latency with other events \n    \n## First statistics \n - we created our parsing library \n - [using various recipes](http://chimera.labs.oreilly.com/books/1230000000393/ch06.html)\n - Having the data in a dict like\n\n        &gt; table = {\n        &gt;   'time': [ 1,2,3, ..],\n        &gt;   'elapsed': [ 0.12, 12.43, ..],\n        &gt;   'error': [ 2, 0, ..],\n        &gt;   'size': [123,3223, ..],\n        &gt;   'peers': [2313, 2303, ..],\n\n - It's easy to get max, min and standard deviation\n\n        &gt; print [k, max(v), min(v), stats.mean(v) ] for k,v in table.items() ]\n\n## Distribution \n - A distribution shows event frequency \n\n        &gt; from matplotlib import pyplot\n        &gt; pyplot.hist(table['elapsed'])\n\n - Time and Size distributions\n\n## (Linear) Correlation \n - What's correlation\n - What's not correlation\n - pearsonr and probability\n - catch for linear correlation\n\n        &gt; from scipy.stats.stats import pearsonr\n        &gt; a, b = range(0,10), range(0,20, 2)\n        &gt; c = [randint(0,10) for x in a]\n        &gt; pearsonr(a, b), pearsonr(a,c)\n        &gt; (1.0, 0.0), (0.43, 0.2)\n\n## Combinations \n - using itertools.combinations\n - netfishing correlation\n\n        &gt;from itertools import combination\n        &gt;for f1, f2 in combinations(table, 2):\n        &gt;        r, p_value = pearsonr(table[f1], table[f2])\n        &gt;        print(\"the correlation between %s and %s is: %s\" % (f1, f2, r))\n        &gt;        print(\"the probability of a given distribution (see manual) is: %s\" % p_value)\n\n## Plot always \n\n - pearsonr finds *only* linear correlation\n - our eyes work better :P\n - so...plot always!\n - color is the 3d dimension of a plot!\n\n        &gt; from pyplot import scatter, title, xlabel, ylabel, legend\n        &gt; from pyplot import savefig, close as closefig\n        &gt;\n        &gt; for f1, f2 in combinations(table, 2):\n        &gt;    scatter(table[f1], table[2], label=\"%s_%s\" % (f1,f2))\n        &gt;    # add legend and other labels\n        &gt;    r, p = pearsonr(table[f1], table[f2])\n        &gt;    title(\"Correlation: %s v %s, %s\" % (f1, f2, r))\n        &gt;    xlabel(f1), ylabel(f2)\n        &gt;    legend(loc='upper left') # show the legend in a suitable corner\n        &gt;    savefig(f1 + \"_\" + f2 + \".png\")\n        &gt;    closefig()\n\n \n## Wrap Up! \n - do not use pearsonr to *exclude* relation between events\n - plots may serve better\n - scatter plot can show a system thruput and exclude correlation between fields A and fields B\n - continue collecting results"
