# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

title: '#droidconDE 2015: Erik André – Making the memory dump a powerful development tool'
recordingDate: 1433762790
description: "Find more information here: http://15.droidcon.de/session/making-memory-dump-powerful-development-tool\n\nMemory dumps can be a very powerful tool for application developers because it provides detailed information about the current application state at when an error has just occurred.\n\nI’m sure most of us have experience working with memory dumps to solve one very specific type of problem: finding the cause of OutOfMemoryErrors.\n\nWhy then, if memory dumps are doing such a good job at helping us fix memory issues, are they not used to analyze and fix other issues?\n\nThe answer to this is twofold. Firstly, the available tools are largely geared towards solving Out of Memory situations.\n\nSecondly, most memory dumps are so big it only makes sense to collect them from a device that you have physical access to.\n\nIt’s the second of these two problems I’m offering a solution for. By making memory dumps small enough to be uploaded from a device, they can become viable tools for debugging more types of issue. The first step towards the goal was to understand the strengths and weaknesses of the commonly used HPROF format. For me this process started while implementing a HPROF library used in a project to deobfuscate ProGuard obfuscated dumps.\n\nMy starting point was to extend the existing HPROF format with new functionality but I soon came to the conclusion that if I wanted to create something better I needed to start from the ground up, discarding legacy compatibility.\n\nWhen designing the format my main inspiration came from binary protocol buffers (https://developers.google.com/protocol-buffers/). A format that is both efficient and flexible. Still, I did not want to use a complete protocol buffer implementation but rather cherry-pick the best concepts from the format:\n\n- Variable length encoding for integers and floating point values\n- Repeated fields without the need to specify the length of the vector\n\nAt the same time, I also wanted to avoid some of the complexities of using protocol buffers, such as:\n\n- Record size encoded into the header\n- Support for handling unknown records\n\nThe end result of applying these and other improvements, is a file format which achieves a size reduction of up to 97% compared to standard HPROF files. Nonetheless, it still contains plenty of relevant data for a developer to analyze.\n\nThis improvement brings memory dumps down to a size where they can evolve from being a one trick pony into an indispensable tool for analyzing many types of issues."
