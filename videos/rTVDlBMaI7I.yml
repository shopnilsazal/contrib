# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - storage
    - security
    - functional
title: 'Peter Hoffmann - SQLAlchemy as the backbone of a Data Science company'
recordingDate: 1470423344
description: "Peter Hoffmann - SQLAlchemy as the backbone of a Data Science company\n[EuroPython 2016]\n[20 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/sqlalchemy-as-the-backbone-of-a-data-science-company)\n\nIn times of NoSQL databases and Map Reduce Algorithms it's surprising how far\nyou can scale the relational data model. At [Blue Yonder](http://blue-\nyonder.com)\nwe use SQLAlchemy in all stages of our data science workflows and handle tenth\nof billions of records to feed our predictive algorithms. This talk will dive\ninto SQLAlchemy beyond the Object Relational Mapping (ORM) parts and conentrate\non the SQLAlchemy Core API, the Expression Language and Database Migrations\nwith Alembic.\n\n-----\n\nIn times of NoSQL databases and Map Reduce Algorithms it's surprising how far\nyou can scale the relational data model. At [Blue Yonder](http://blue-\nyonder.com)\nwe use SQLAlchemy in all stages of our data science workflows and handle tenth\nof billions of records to feed our predictive algorithms. This talk will dive\ninto SQLAlchemy beyond the Object Relational Mapping (ORM) parts and conentrate\non the SQLAlchemy Core API and the Expression Language:\n\n- **Database Abstraction**: Statements are generated properly for different\n  database vendor and type without you having to think about it.\n\n- **Security**: Database input is escaped and sanitized prior to beeing commited\n  to the database. This prevents against common SQL injection attacks.\n\n- **Composability and Reuse**: Common building blocks of queries are expressed\n  as SQLAlchemy selectables and can be reuesd in other queries.\n\n- **Testability**: SQLAlchemy allows you to perform functional tests\nagainst a database\n  or mock out queries and connections.\n\n- **Reflection**: Reflection is a technique that allows you to generate a\n  SQLAlchemy repesentation from an existing database. You can reflect tables,\n  views, indexes, and foreign keys.\n\nAs a result of the usage of SQLAlchemy in Blue Yonder, we have implemented and\nopen sourced a SQLAlchemy dialect for the in memory, column-oriented database\nsystem [EXASolution](https://github.com/blue-yonder/sqlalchemy_exasol)"
