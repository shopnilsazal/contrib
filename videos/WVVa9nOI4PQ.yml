# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - unix
    - storage
    - php
    - performance
title: 'Applying profilers to MySQL From PMP to perf, and why performance_schema is not a replacement in alâ€¦'
language: English
recordingDate: 1520770213
description: "Applying profilers to MySQL From PMP to perf, and why performance_schema is not a replacement in all cases\nby Valerii Kravchuk\n\nAt: FOSDEM 2017\n\nWhile troubleshooting MySQL performance problems it is important to find outwhere CPU time is spent inside mysqld process. The process of investigationshould have as small influence as possible on the server we try totroubleshoot. Ideally, the source code should be instrumented for that.\n\nPerformance_schema introduced in MySQL 5.5 is supposed to provide detailedenough instrumentation. But it comes with a cost, require careful sizing ofperformance counters, and the process of instrumenting the code is not yetcomplete even for MySQL itself, to say nothing about 3rd party storageengines, plugins and libraries like Galera.\n\nThis is when profilers come handy. Poor Man's Profiler (PMP, aka pt-pmp), perfand oprofile on Linux can be easily used while studying MySQL performanceproblems. Basic usage steps are presented and several typical use cases arediscussed.\n\nIn case of any performance problems with MySQL is important to find out whereCPU time is spent inside mysqld process. Is it waiting on disk I/O, some lockor internal mutex, or maybe it performs complex computation that should beoptimized? You can not figure out until you know how much time each importantstep takes, and how often it occurs. To investigate that, one may usedifferent tools and approaches, from tracing the code to using simple OS levelutilities that show disk and memory usage in total or per device, to moreadvanced programs that collect all kinds of information about specific programrunning (these are often called profilers). The process of investigationshould have as small influence as possible on the server we try totroubleshoot.\n\nIdeally, the source code should be instrumented for that and provide a\"domain-specific\" performance metrics. It may be not enough to know how muchtime specific function runs if its code is huge and complex.Performance_schema introduced in MySQL 5.5 was supposed to provide detailedenough instrumentation. But it comes with a cost (performance penalty, thatcan be notable), require careful sizing of performance counters, forceinvestigator to use advanced SQL to get the information needed. What's evenworse, the process of instrumenting the code is not yet complete even forMySQL itself, to say nothing about 3rd party storage engines, plugins andlibraries like Galera.\n\nThis is when profilers come handy. During this talk we'll discuss the use ofPoor Man's Profiler (PMP, aka pt-pmp), perf and oprofile on Linux to studyMySQL performance problems. Basic usage steps are presented and severaltypical use cases are discussed. These including several famous bugs (likehttps://bugs.mysql.com/bug.php?id=68079), profiling for Galera, MyRocksstorage engine etc. Quick review of the most interesting MySQL bug reportswhere profilers played a key role in the investigation is also presented.\n\n\nRoom: H.1309 (Van Rijn)\nScheduled start: 2017-02-04 10:05:00"
