# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

title: 'VEX Where next for Valgrind''s dynamic instrumentation infrastructure?'
language: English
recordingDate: 1520882576
description: "by Julian Seward\n\nAt: FOSDEM 2017\n\nVEX is the JIT at the core of Valgrind. It unpicks blocks of machine code,hands them off to the tool for instrumentation, recompiles the result, andlinks the instrumented version into the running image. By using a targetindependent intermediate representation, it insulates tools from thecomplexity of the underlying instruction sets.\n\nBack in 2003, when the framework was designed, I never dreamt that it wouldend up supporting X86, ARM, POWER, MIPS, S390 and TILEGX in both 32- and64-bit variants. From that perspective VEX has been amazingly successful. Butthe framework is now showing its age. Recent instruction set features(transactional memory, LoadLinked/StoreConditional, wide vectors) have provendifficult to implement. It supports precise memory exceptions only poorly. Andperhaps worst, its simplistic compilation pipeline causes it to generate codethat is uncompetitive compared to other frameworks, particularly DynamoRIO andPIN.\n\nIn this talk I'll outline VEX's structure, then talk about these problems andwhat can be done about them. And I'd be particularly interested to hearopinions on how much effort, and for which problem areas, should be investedin upgrading it.\n\nFor the audience, some background in compiler internals and assembly codeprogramming would be helpful, but is not essential.\n\n\nRoom: UD2.119 (Moved from AW1.124)\nScheduled start: 2017-02-04 14:30:00"
