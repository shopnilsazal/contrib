# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - architecture
    - python
title: 'Patrick Mühlbauer - Split Up! Fighting the Monolith'
recordingDate: 1470464950
description: "Patrick Mühlbauer - Split Up! Fighting the Monolith\n[EuroPython 2016]\n[22 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/split-up-fighting-the-monolith)\n\nHaving to deal with a monolith, an application which became far to big\nover the time, can be quite bothersome. On the other hand if you split\nit up and have to deal with lots of smaller components, you might end\nup in dependency hell. But not only the splitting of the monolith and\nthe management of the dependencies afterwards can be a problem, but\nalso the packaging of you python components itself.\n\n-----\n\nDo you know this situation, where you and your team are facing this\nbig monolith? An application which has grown far too\nbig over the years. Every time when you make a change, you have to\nfear the code might break at a totally different place, because lots\nof things\nare closely intertwined. But what to do if you are at such a point?\nMaybe you start thinking about microservices but then questions like\n\"Are they really the right thing for us?\" and \"How do we get there?\" arise.\n\nIn my talk I will show you how we are dealing with our monolith. A\ncollection of multiple python packages without clear boundaries,\nforming the\nactual application - all living in a single monorepo.\n\nI will talk about how we split up the whole thing, making it more\nflexible for us and also easier to use individual components by other\nteams.\nAll this, of course, comes with a price: You have to think more about\nthe dependencies between you components. You have to think about how\nyou can efficiently test everything, making sure your final\napplication is still working correctly.\nDon't loosing yourself in dependency hell and packaging all components\ncorrectly becomes quite a challenge.\n\nThis talk will:\n\n - show you bad patterns to avoid, so that you don't end up in the\nabove situation in the first place\n - give you ideas what to consider when tackling your monolith\n - explain how to package your python components and how to mange your\ndependencies"
