# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - performance
    - security
title: 'DEF CON 14 - Scott Miller: A New Bioinformatics-Inspired and Binary Analysis'
recordingDate: 1391675798
description: "Scott Miller: A New Bioinformatics-Inspired and Binary Analysis: Coding Style/Motif Identification\n\nAbstract: Security analysis is severely complicated by the size and abundance of executable code. Existing concepts and code can be combined, obfuscated, packed, and hidden toward the ends of evading detection and frustrating analysis. Is that patch fixing the problem it claims to fix? Have you seen that malicious code before? Have you seen these particular motifs/style before? All very interesting questions, some of which can be addressed using existing tools/techniques. This talk looks at a new tool, inspired by a scored string match used for genetic analysis: the Basic Local Alignment Search Tool (BLAST). Can this tool identify motifs common to UPX? Can this tool identify code generated by different versions of GCC? Does this tool provide similar Malware classifications to other tools? The talk will include an overview of the technique, demonstration of the use of the new tool set (binBLAST), and its performance.\n\n Bio: Scott Miller has recently graduated from the New Mexico Institute of Mining and Technology, the technique of this presentation developed in his Master's Thesis \"A Bioinformatics Approach to the Security Analysis of Binary Executables\". While pursuing his master's degree, he also considered a number of topics including human infection/immunity, natural language steganography, self-sustaining high-availability intrusion prevention systems, and secure compiler construction. Bridging the Gap Between Static and Dynamic Reversing Luis Miras, Vulnerability Researcher, Intrusion Inc. Abstract: Reverse engineering continues to evolve, or rather REvolve. The reverse engineering toolset primarily consists of disconnected disassemblers and debuggers. Without symbol information or data acquired from disassembly, the use of a debugger can be blind and tedious. Reverse engineering has fueled the need to enable these tools to work together. When disassemblers and debuggers are used in conjunction, the resulting union is greater than sum of the disparate parts. To bridge the gap between disassemblers and debuggers, I will be releasing two IDA Pro plugins. * pdbgen-Generates custom pdb files from the IDA Pro da"
