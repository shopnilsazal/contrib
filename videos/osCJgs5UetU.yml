# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - python
title: 'Domen Kožar - What Python can learn from Haskell packaging'
recordingDate: 1470420619
description: "Domen Kožar - What Python can learn from Haskell packaging\n[EuroPython 2016]\n[18 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/what-python-can-learn-from-haskell-packaging)\n\nHaskell community has made lots of small important improvements to\npackaging in 2015. What can Python community learn from it and how are\nwe different?\n\n-----\n\nHaskell community has been living in \"Cabal hell\" for decades, but\nStack tool and Nix language have been a great game changer for Haskell\nin 2015.\n\nPython packaging has evolved since they very beginning of distutils in\n1999. We'll take a look what Haskell community has been doing in their\nplayground and what they've done better or worse.\n\nThe talk is inspired by Peter Simons talk given at Nix conference:\n[Peter Simons: Inside of the Nixpkgs Haskell Infrastructure][1]\n\n[1]: https://www.youtube.com/watch?v=TDnZsBxqeBM&list=PL_IxoDz1Nq2Y7mIxMZ28mVtjRbbnlVdmy&index=4\n\nOutline:\n\n- Cabal (packaging) interesting features overview\n  - Cabal file specification overview\n  - Interesting Cabal features not seen in Python packaging\n  - Lack of features (introduction into next section)\n- Cabal hell\n  - Quick overview of Haskell community frustration over Cabal tooling\n- Stack tool overview\n  - What problem Stack solves\n  - How Stack works\n  - Comparing Stack to pip requirements\n- Using Nix language to automate packaging\n  - how packaging is automated for Haskell\n  - how it could be done for Python"
