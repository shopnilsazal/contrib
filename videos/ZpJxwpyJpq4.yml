# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - testing
    - ruby
    - python
title: 'Elizaveta Shashkova - Monkey-patching: a magic trick or a powerful tool?'
recordingDate: 1470464948
description: "Elizaveta Shashkova - Monkey-patching: a magic trick or a powerful tool?\n[EuroPython 2016]\n[22 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/monkey-patching-a-magic-trick-or-a-powerful-tool)\n\nMonkey-patching is a dynamic modification of a class or a module at runtime.\n\nThe Python gives developers a great opportunity to use monkey-patching\nalmost everywhere. But should developers do it? Is it a magic trick or\na powerful tool? In this talk we will try to give the answers to these\nquestions and try to figure out pros and cons of using monkey-\npatching.\n\n-----\n\nFirst of all we will learn what is monkey-patching in Python and\nconsider some basic examples of using it.\n\nOf course, monkey-patching may cause some problems in the code. We\nwill consider bad ways to use it and try to learn different types of\nproblems monkey-patching may lead to.\n\nDespite of some bugs that may appear in a patched program, monkey-\npatching is used in a real life rather often. There are some reasons\nand motives to do it. We will consider the examples of using monkey-\npatching in real projects like `gevent`, in some other libraries and\nin testing. Also we will learn some monkey-patch tricks that helps to\nsolve real-life problems in the Python debugger which is a part of the\nPyCharm and the PyDev.\n\nAfter that we will compare using of monkey-patching in Python to using\nit in an another dynamic language Ruby. Are there any differences\nbetween them? Is our reasoning correct for Ruby?\n\nFinally we will conclude all our thoughts and examples and try to give\nthe answer to the question from title."
