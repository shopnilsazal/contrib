# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - python
title: 'Rob Collins - DumbDev -- eight rules for dumb development'
recordingDate: 1439049890
description: "Rob Collins - DumbDev -- eight rules for dumb development\n[EuroPython 2015]\n[24 July 2015]\n[Bilbao, Euskadi, Spain]\n\nSo often, we've been encouraged to be smart in our development. \"Work\nsmarter not harder!\" say the encouraging posters. But the desire to be\nsmart, and be seen to be smart, is hurting. The design suffers, the\ncode suffers, and it's hard to recruit developers smart enough to cope\nwith the problems caused.\n\nIn this talk, I'm proposing an alternative to being smart:\n**_DumbDev_**. Let's use our brains for enjoyable, interesting things,\nrather than wrestling with code written for smart developers.\n\n**So what do I mean by _dumb_?**\n\nWell, I don't mean 'ignorant'. A clever person can be ignorant of some\nimportant information, and learn it. With ignorance, there is hope.\nI'm also not talking about its opposite, 'stupidity'. This occurs when\nsomeone is given the information or advice, and chooses to ignore it.\nDumb isn't stupid. Nor is it silent, as in someone who can't speak.\n\nInstead, the picture I have is of one of the early computers: very\nsmall RAM, disk space measured in KB, and a woefully inadequate CPU.\nIn other words, slow, with very little working memory and limited\npersistent storage. Hey, this describes my brain -- and I realise\nthat's an asset! I will write better software if I take this into\naccount.\n\nSo, I'm a **_DumbDev_**, which means I can't hold in my mind the\ninfamous [Plone Site class hierarchy][1] (see [Michele Simionato's\narticle][2]). Rather than beat myself up about this, I can say, \"Hold\non, maybe deep inheritance is a bad idea...\" There is some debate\nabout the number of things we can think about simultaneously: it may\nbe 7, 9, 5, 4 or even only 3. We can learn some tricks to appear to\ncope with more, but most of us can't easily do 38.\n\nHere's the first **_DumbDev_** rule, putting a sensible limit on complexity:\n\n&gt; **1. All diagrams must fit on a Noughts and Crosses (Tic-tac-toe) board**.\n\n&gt; _One central class/concept and up to eight things linked. Larger\nstructures need to be subdivided._\n\nThere are seven further rules for me to explain in this talk. I will\ndemonstrate the benefits of the **_DumbDev_** approach, with good and\nbad examples. At the end of the presentation, I hope you will realise\nthat you're a better developer than you thought at the start. The next\ntime it takes you two hours to debug a simple exception, you'll know\nthat it's not you. It's because the system wasn't written using\n**_DumbDev_** rules.\n\nLet's free our brains for more interesting things, like having ideas\nand solving problems.\n\nLet's do **_DumbDev_**.\n\n[1]: http://www.phyast.pitt.edu/~micheles/python/plone-hierarchy.png\n[2]: http://www.artima.com/weblogs/viewpost.jsp?thread=246341"
