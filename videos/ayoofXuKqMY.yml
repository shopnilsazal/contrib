# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - lisp
    - functional
title: '"big-bang: the world, universe, and network in the programming language" by Matthias Felleisen'
language: English
recordingDate: 1443380633
description: "How do you control communicating actors? How do you implement an SSH server in a truly functional style? How do you teach middle school students event-driven programming? How are these questions related?\n\nThis talk will present a tour through Racket's world of thinking in a purely functional manner. It will start with the Universe library, which we use for reaching middle school students, and it will end with a sketch of the Network Calculus dialect, a natural research outgrowth of the Universe.\n\nRacket's Universe library is the foundation of the long-running Bootstrap and ProgramByDesign K-12 outreach projects. The library's exports make algebra come alive. With big-bang, a middle-school student's \"hello world\" program simulates a rocket lift-off:\n\n  (define (lift-off t)\n    (place-image rocket middle (- height t) background))\n\n  (define rocket .. some image ..)\n  (define background .. some image ..)\n  (define height (image-height background))\n  (define middle (/ (image-width background) 2))\n\n  ;; run program run\n  (animate lift-off)\nMore generally, middle school students can formulate interactive, graphical programs---animations, video games, or simple editors---with algebra. Even evaluating these programs uses nothing but algebraic calculations.\n\nThe key to this approach is big-bang, which turns algebraic functions on numbers, booleans, images, and strings into event handlers and rendering functions:\n\n  (big-bang height\n     [to-draw lift-off]\n     [on-tick sub1]\n     [stop-when zero?])\nA big-bang expression describes a world with functions. Precisely put, it associates functions with certain events. Each function consumes the state of the world and possibly some additional information; it returns the next state of the world or computes a property of the world.\n\nNaturally a world is not enough. Therefore Universe also exports a universe form, with which students can create a network of worlds. For example, they can turn the above animation into a remote-controlled one with just three lines of code added to the above:\n\n   [register LOCALHOST]\n   [on-key (lambda (w key) (make-package w 'reset))]\n   [on-receive (lambda (s m) height)]\nA beginning student formulates the \"universe\" server as a top-level function instead of a lambda, but it still doesn't take more than 10 lines.\n\nEven though worlds connected in a universe still consist of algebraic descriptions of state, state transformation, and communication, network connectivity turns the resulting systems into a non-deterministic one. Our college freshmen routinely study and use this material to construct distributed programs at the end of their first semester.\n\nFinally, over the past couple of years, Universe programming has given rise to the idea of folding the network into the programming language. Here a network consists of communicating actors---each of which may be a network itself---and a coordinating messaging board on which actors publish messages and subscribe to them.\n\nThe Network Calculus language (NC) is a dialect of Racket that supports programming with these trees of actors. As such, programming in NC resembles programming with actors in Akka or Erlang/OMP, but it also integrates well-known patterns as a language construct.\n\n[[ Attendees are encouraged to install Racket before the presentation and to participate in a small interactive demo midway through the presentation (via pre-packaged code). ]]\n\nMatthias Felleisen\n\nI launched the PLT research group at Rice University that created Racket and has maintained it for the past 20 years."
