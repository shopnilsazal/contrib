# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - unix
    - testing
    - python
title: 'Mark Smith - Writing Awesome Command-Line Programs in Python'
recordingDate: 1411368817
description: "Mark Smith - Writing Awesome Command-Line Programs in Python\n[EuroPython 2014]\n[24 July 2014]\n\nCommand-Line programs can have a lot to them - usually more than you think, yet often suffer from a lack of thought.\nThis is a tour through how to structure your code, tools in the standard library and some 3rd party libraries. Take your command-line programs to the next level!\n\n-----\n\nPython is a great language for writing command-line tools - which is why so much of Linux is secretly written in Python these days. Unfortunately, what starts as a simple script can quickly get out of hand as more features are added and more people start using it!\n\nThe talk will consist of a tour through various useful libraries and practical code showing how each can be used, and include advice on how to best structure simple and complex command-line tools.\n\nThings to consider when writing command-line apps:\n\n* Single-file vs Multiple-file\n* Standard library only vs. 3rd party requirements\n* Installation - setup.py vs. native packaging\n\nThe different parts of a command-line program:\n\n* Option Parsing:\n    * Libraries: getopt, optparse, argparse, docopt\n    * Sub-commands\n* Configuration:\n    * Formats: Ini file, JSON, YAML\n    * Where should it be stored (cross-platform);\n    * Having multiple configuration files, and allowing user config to override global config\n* Output:\n    * Colour - colorama\n    * Formatting output for the user\n    * Formatting output for other programs\n    * How do you know when your output is being piped to another program?\n    * Managing logging and verbosity\n* Managing streamed input\n* Exit values: What are the conventions?\n* Interactive apps - REPL\n* Structuring a bunch of programs/commands around a shared codebase.\n* Command-line frameworks: clint, compago & cliff\n* Testing command-line apps\n* Writing command-line tools in Python 3 vs Python 2"
