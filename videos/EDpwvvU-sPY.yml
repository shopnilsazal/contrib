# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - containers
    - docker
    - testing
    - architecture
    - python
title: 'Christie Wilson/Michael Tom-Wing - System Testing with pytest and docker-py'
recordingDate: 1470425425
description: "Christie Wilson/Michael Tom-Wing - System Testing with pytest and docker-py\n[EuroPython 2016]\n[20 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/system-testing-with-pytest-and-docker-py)\n\nSystem tests are an invaluable tool for verifying correctness of large\nscale online services. This talk will discuss best practices and\ntooling (pytest and docker-py) for writing maintainable system tests.\n\nDemonware has used System tests to verify online services for some of\nthe biggest AAA video game launches as well as internal operational\ntools.\n\nMany folks who write software are familiar with unit testing, but far\nfewer with system testing.\n\n-----\n\nSystem testing a microservice architecture is challenging. As we move\naway from monolithic architectures, system testing becomes more\nimportant but also more complicated.\n\nIn the video game industry, if a game doesn’t work properly\nimmediately after launch, it will heavily impact game success. We have\nfound system testing to be an important tool for pre launch testing of\ngame services and operational tools, to guarantee quality of these\nservices at launch.\n\nWe want to share with you best practices for system testing: when to\nwrite system tests, what to test and what not to, and common pitfalls\nto avoid. Using python’s pytest tool and docker-py for setting up\nservices and their dependencies has made it easier than ever to write\ncomplex but maintainable system tests and we’ll share with you how\nwe’ve made use of them.\n\nDevelopers (senior and junior) and ops folks can walk away from this\ntalk with practical tips they can use to apply system testing to their\nsoftware."
