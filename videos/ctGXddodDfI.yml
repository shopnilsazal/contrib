# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

title: 'Incremental Graph Queries with openCypher'
language: English
recordingDate: 1520373300
description: "by Gabor Szarnyas\n\nAt: FOSDEM 2017\n\nHow can we evaluate a global query on huge graphs in 0.1 seconds? Given ourcurrent technology, that would be magic. The lack of wizarding skills did notstop us, however, from tackling the problem by using smart caching structures,which are witchcrafts on their own.\n\nWhy is this challenge important? Several applications evaluate global querieson continuously changing graphs: [fraud detection in financialtransactions](https://neo4j.com/resources/recommendations-business-white-paper/), [analysis of source coderepositories](http://docs.inf.mit.bme.hu/ingraph/pub/stein-daniel-static-analysis.pdf) and [validating engineeringmodels](http://link.springer.com/chapter/10.1007/978-3-319-11653-2_40).Current approaches employ domain-specific optimizations, which are difficultand error-prone to implement. Meanwhile, the requirements of these (andsimilar) use cases could be uniformly addressed by incremental graph queryevaluation. With this technique, the first execution of the queries takes sometime, but once the result are calculated, they can be efficiently maintainedfor each change in the graph.\n\nTo allow incremental queries on property graphs, we implemented the[ingraph](https://github.com/FTSRG/ingraph) engine, based on the[openCypher](http://www.opencypher.org/) language specification. We aim tosupport the [standardsubset](https://github.com/opencypher/openCypher/blob/master/docs/standardisation-scope.adoc) of openCypher, as most standard constructs can be calculatedincrementally. We already mapped some of the standard constructs to[relational algebra](http://docs.inf.mit.bme.hu/ingraph/pub/opencypher-report.pdf), defined [incremental relational algebraicoperators](http://docs.inf.mit.bme.hu/preprints/perpol2016-gqo.pdf) andimplemented them in an [incremental relationalengine](https://github.com/FTSRG/ire) using [Akka](http://akka.io/) actors.\n\nWe start the talk by presenting use cases that evaluate complex global querieson continuously changing graphs and discuss the idea of incremental graphqueries. We show the mapping of basic openCypher constructs (e.g. `MATCH`,`WHERE`, `WITH`, `RETURN`) to relational operators, such as joins, selectionsand projections. Finally, we show our approach for optimizing incrementalgraph queries and outline related challenges.\n\nTarget audience: Developers, looking for a deeper understanding of openCypherand/or facing complex queries on continuously changing graphs\n\n\nRoom: H.2214\nScheduled start: 2017-02-04 10:50:00"
