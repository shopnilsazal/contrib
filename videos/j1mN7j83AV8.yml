# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - unix
    - web
    - python
title: 'Thomas Aglassinger - Solution oriented error handling'
recordingDate: 1411368775
description: "Thomas Aglassinger - Solution oriented error handling\n[EuroPython 2014]\n[22 July 2014]\n\nThis talk shows how to use Python's built in error handling mechanisms to keep the productive code clean, derive error messages helpful for the user directly from the code and release ressources properly.\n\n-----\n\nTraditionally error handling is regarded an annoyance by developers because it removes the focus from the already difficult enough productive parts of the code to parts that ideally will never be called. And even if, end users seem to be ignore the error messages and just click \"Ok\" or call the help desk.\n\nSolution oriented error handling uses Python's existing try/catch/finally idiom, with statement, assert statement and exception hierarchy in a way that keeps the code clean and easy to maintain. It gives a clear distinction between errors that can be solved by the end user, the system administrator and the developer. Naming conventions and a simple set of coding guidelines ensure that helpful error messages can be easily derived from the code.\n\nMost code examples work with Python 2.6+ and Python 3.x, on a few occasions minor differences are pointed out.\n\nTopics covered are:\n\n1. Introduction to error handling in Python\n    - What are errors?\n    - How to represent errors in Python\n    - Detecting errors\n    - Delegating errors to the caller\n    - clean resource management\n2. Principles of solution oriented error handling\n    - responsibilities between user, admin and developer\n    - when to use raise or assert\n3. Error messages\n    - What are \"good\" error messages\n    - How to derive error messages from the source code\n    - Adding context to the error\n    - How to report errors to the user\n4. Solution oriented usage of Python's exception hierarchy\n    - admins fix `EnvironmentError`\n    - users fix `DataError`\n        - representing `DataError`\n        - converting exceptions to `DataError`\n    - developers fix everything else\n    - special Python exceptions not representing errors\n5. Template for a solution oriented command line application\n6. Best practices for `raise` and `except`\n    - When to use `raise`?\n    - When to use `except`?\n\nThis talk is a translation of a German [talk](https://github.com/roskakori/talks/tree/master/pygraz/errorhandling) given at the PyGRAZ user group and in a (slightly depythonized variant) the Grazer Linux Tag 2013 ([slides and video](http://glt13-programm.linuxtage.at/events/198.de.html))."
