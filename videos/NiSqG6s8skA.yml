# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - web
    - python
    - functional
title: 'Petr Viktorin - The Magic of Attribute Access'
recordingDate: 1411368774
description: "Petr Viktorin - The Magic of Attribute Access\n[EuroPython 2014]\n[22 July 2014]\n\nHave you ever wondered how the \"self\" argument appears when you call a method? Did you know there is a general mechanism behind it? Come learn all about attributes and descriptors.\n\n-----\n\nThe first part of this talk will describe what exactly happens when you\nread or write an attribute in Python.\n\nWhile this behavior is, of course, explained in the Python docs,\nmore precisely in the [Data model][1] section and [related][2] [writeups][3],\nthe documentation gives one a \"bag of tools\" and leaves combining them\nto the reader.\n\nThis talk, on the other hand, will present one chunk of functionality,\nthe attribute lookup, and show how its mechanisms and customization\noptions work together to provide the flexibility (and gotchas) Python provides.\nThe topics covered will be:\n\n* method resolution order, with a nod to the C3 algorithm\n* instance-, class-, and metaclass-level variables\n* `__dict__` and `__slots__`\n* data/non-data descriptors\n* special methods (`__getattr__`, `__getattribute__`, `__setattr__`, `__dir__`)\n\n\nIn the second part of the talk, I will show how to use the customization\nprimitives explained before on several interesting and/or useful examples:\n\n* A proxy object using `__getattr__`\n* Generic desciptor - an ORM column sketch\n* the rudimentary `@property`, method, `staticmethod` reimplemented in\n  pure Python (explained [here][2] and elsewhere), which lead to\n* SQLAlchemy's [`@hybrid_proprerty`][4]\n* Pyramid's deceptively simple memoizing decorator, [`@reify`][5]\n* An [\"Unpacked\" tuple properties][6] example to drive home the idea that\n  descriptors can do more than provide attribute access\n  (and mention weak dicts as a way to non-intrusively store data on an object)\n\n\n(These are subject to change as I compose the talk. Also some examples may\nend up interleaved with the theory.)\n\nHopefully I'll have time to conclude with a remark about how Python manages to be\na \"simple language\" despite having these relatively complex mechanisms.\n\n\n[1]: http://docs.python.org/3/reference/datamodel.html\n[2]: http://docs.python.org/3/howto/descriptor.html\n[3]: https://www.python.org/download/releases/2.3/mro/\n[4]: http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/hybrid.html\n[5]: http://docs.pylonsproject.org/projects/pyramid/en/latest/api/decorator.html\n[6]: https://gist.github.com/encukou/9789993"
