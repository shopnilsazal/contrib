# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - python
title: 'Ilia Kurenkov - re-Discovering Python''s Regular Expressions'
recordingDate: 1469951782
description: "Ilia Kurenkov - re-Discovering Python's Regular Expressions\n[EuroPython 2016]\n[19 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/rediscovering-pythons-regular-expressions)\n\nAs Armin Ronacher pointed out in a recent blog post, there is more to\nPython's regular expression module than meets the eye. His post made\nme wonder what other “hidden gems” are stashed away in Python’s `re`.\nIn the talk I share what I’ve learned about the inner workings of this\nextremely popular and heavily used module.\n\n-----\n\nAnyone who has used Python to search text for substring patterns has\nat least heard of the regular expression module. Many of us use it\nextensively for parsers and lexers, extracting information .\nAnd yet we know surprisingly little about its inner workings, as Armin\nRonacher demonstrated in his recent blog post, “Python's Hidden\nRegular Expression Gems”. Inspired by this, I want to dive deeper into\nPython’s `re` module and share what I find with folks at EuroPython.\nMy goal is that at the end of the day most of us walk away from this\ntalk with a better understanding of this extremely useful module.\n\nHere are a few examples of the kinds of things I would like to cover:\n\n - A clear presentation of `re`’s overall structure.\n - What actually happens behind the scenes when you “compile” a\nregular expression with `re.compile`?\n - What are the speed implications of using a callable as the\nreplacement argument to `re.sub`?\n - re.MatchObject interface: `group` vs. `groups` vs `groupdict`\n\nTo keep the talk entertaining as well as educational I plan to pepper\nit with whatever interesting and/or funny trivia I find about the\nmodule’s history and structure.\n\nPrerequisites:\nIf you've ever used the `re` module, you should be fine :)"
