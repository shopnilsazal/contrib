# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - performance
    - python
title: 'Anjana Vakil - Exploring Python Bytecode'
recordingDate: 1470424064
description: "Anjana Vakil - Exploring Python Bytecode\n[EuroPython 2016]\n[20 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/exploring-python-bytecode)\n\nDo you ever wonder how your Python code looks to the interpreter? What\nthose `.pyc` files are? Why one program outperforms another, even if\nthe code is similar? Then let’s dive into Python bytecode! Bytecode is\nthe \"intermediate language\" that expresses your source code as machine\ninstructions the interpreter can understand. In this talk we’ll see\nwhat role it plays in executing Python programs, learn to read it with\nthe `dis` module, and analyze it to better understand a program’s\nperformance.\n\n-----\n\nDo you ever wonder what your simple, beautiful Python code looks like\nto the interpreter? Are you starting to get curious about those `.pyc`\nfiles that always pop up in your project, and you always ignore? Would\nyou like to start investigating your Python code's performance, and\nlearn why some programs you write run faster than others, even if the\ncode looks more or less the same? Have you simply fallen so completely\nin love with Python that you're ready to peer deep inside its soul?\n\nIf you, like me, answered \"yes\" to any of these questions, join me in\nan illuminating adventure into the world of Python bytecode! Bytecode\nis the \"intermediate language\" that expresses your Python source code\nas machine instructions the interpreter (specifically CPython, the\n\"standard\" interpreter) can understand. Together we'll investigate\nwhat that means, and what role bytecode plays in the execution of a\nPython program. We'll discover how we simple humans can read this\nmachine language using the `dis` module, and inspect the bytecode for\nsome simple programs. We'll learn the meaning of a few instructions\nthat often appear in our bytecode, and we'll find out how to learn the\nrest. Finally, we'll use bytecode to understand why a piece of Python\ncode runs faster if we put it inside of a function.\n\nWhen you go home, you'll be able to use bytecode to get a deeper\nunderstanding of your Python code and its performance. The adventure\nsimply starts here; where it ends is up to you!"
