# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - python
title: 'Sebastian Witowski - Writing faster Python'
recordingDate: 1469951783
description: "Sebastian Witowski - Writing faster Python\n[EuroPython 2016]\n[19 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/writing-faster-python)\n\nPresentation on how you can write faster Python in your daily work. I\nwill briefly explain ways of profiling the code, discuss different\ncode structures and show how they can be improved. You will see what\nis the fastest way to remove duplicates from a list, what is faster\nthan a _for_ loop or how “asking for permission” is slower than\n“begging for forgiveness”.\n\n-----\n\nDid you know that Python preallocates integers from -5 to 257 ?\nReusing them 1000 times, instead of allocating memory for a bigger\ninteger, can save you a couple of milliseconds of code’s execution\ntime. If you want to learn more about this kind of optimizations then,\n… well, probably this presentation is not for you :) Instead of going\ninto such small details, I will talk about more _\"sane\"_ ideas for\nwriting faster code.\n\nAfter a very brief overview of how to optimize Python code (rule 1:\ndon’t do this, rule 2: don’t do this yet, rule 3: ok, but what if I\nreally want to do this ?), I will show simple and fast ways of\nmeasuring the execution time and finally, discuss examples of how some\ncode structures could be improved.\n\nYou will see:\n\n - What is the fastest way of removing duplicates from a list\n\n - How much faster your code is when you reuse the built-in functions\ninstead of trying to reinvent the wheel\n\n - What is faster than the good ol’ _for_ loop\n\n - If the lookup is faster in a list or a set (and when it makes sense\nto use each)\n\n - How the “It's better to beg for forgiveness than to ask for\npermission” rule works in practice\n\nI will NOT go into details of _\"serious\"_ optimization, like using\ndifferent Python implementation or rewriting critical code in C, etc."
