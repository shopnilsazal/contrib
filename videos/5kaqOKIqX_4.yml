# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - testing
    - python
    - .net
    - functional
title: 'Tom Viner - Testing with two failure seeking missiles: fuzzing and property based testing'
recordingDate: 1439027559
description: "Tom Viner - Testing with two failure seeking missiles: fuzzing and property based testing\n[EuroPython 2015]\n[23 July 2015]\n[Bilbao, Euskadi, Spain]\n\n**[Full Video of Talk][0]**\n\nTesting with purely random data on it's own doesn't get you very far. But\ntwo approaches that have been around for a while have new libraries that\nhelp you generate random input, that homes in on failing testcases.\n\nFirst **[Hypothesis][1]**, a Python implementation and update of the\nHaskell library\nQuickCheck. Known as property based testing, you specify a property of your\ncode that must hold, and Hypothesis does its best to find a counterexample.\nIt then shrinks this to find the minimal input that contradicts your\nproperty.\n\nVideo: https://www.youtube.com/watch?v=YGim-BL_ebE#t=53m17s\n\nSecond, **[American fuzzy lop][2]** (AFL), is a young fuzzing library\nthat's already\nachieved an impressive trophy case of bug discoveries. Using\ninstrumentation and genetic algorithms, it generates test input that\ncarefully searches out as many code paths as it can find, seeking greater\nfunctional coverage and ultimately locating crashes and hangs that no other\nmethod has found. I'll be showing how with **[Python-AFL][3]** we can apply this\ntool to our Python code.\n\n[0]: https://youtu.be/YGim-BL_ebE?t=53m17s\n[1]: https://hypothesis.readthedocs.org/en/latest/\n[2]: http://lcamtuf.coredump.cx/afl/\n[3]: http://jwilk.net/software/python-afl"
