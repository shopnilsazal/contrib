# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

title: 'Mircea Zetea - Managing technical debt'
recordingDate: 1470419729
description: "Mircea Zetea - Managing technical debt\n[EuroPython 2016]\n[18 July 2016]\n[Bilbao, Euskadi, Spain]\n(https://ep2016.europython.eu//conference/talks/managing-technical-debt)\n\nTechnical debt lives among us regardless if we are in the services\nbusiness or building products.\nWe discuss about it, we try to fix it or live with it, but can we\nactually prevent it?\nMy reason for discussing this openly is because once it is there you\ndo not only deal with the technical debt itself but also with the\ninterest you must pay.\nWhat qualifies as debt? What qualifies as interest? How do we manage\nit? Is it really unavoidable?\n\n-----\n\nTechnical debt lives among us regardless if we are in the services\nbusiness or building products.\nWe discuss about it, we try to fix it or live with it, but can we\nactually prevent it?\nMy reason for discussing this openly is because once it is there you\ndo not only deal with the technical debt itself but also with the\ninterest you must pay.\nMy reason for discussing this openly is because once it is there you\ndo not only deal with the technical debt itself but also with the\ninterest you must pay. Comparing the two, probably the highest cost\nthat we see is with the interest.\n As our code base grows and our deadlines get tougher we tend to\nforget about the cost our project will have to pay for every\nfunctionality that we implement in a hurry, for which we “forget”\nabout tests or for which we write in a comment “this needs to be\nrefactored” or “this is a temporary solution. refactor later”.\nWhat qualifies as debt? What qualifies as interest? How do we manage\nit? At what levels in our projects can we see the debt and the\ninterest? Is it really unavoidable?"
