# Editing guidelines: https://github.com/watch-devtube/contrib/#how-to-edit-video-metadata

tags:
    - storage
    - web
    - python
title: 'The power of duck typing and linear algrebra  How linear algebra and python make a good fit'
language: English
recordingDate: 1520770043
description: "by Julien Tayon\n\nAt: FOSDEM 2017\n\nAlgebraic operator are every where in python. + = * / Dict are every where inpython.\n\nWhat can we achieve by combining both of them?\n\n[Slides](http://jul.github.io/cv/pres.html#/init) are here\n\n## Introduction\n\nAlgebra is a wonderful abstraction that make the infamous 2D point example ofa class or nameddict useless when you have complex data type (that is HWaccelerated on Intel CPU).\n\n## I Algebra 101 : it is all about consistency between symbol and behaviour\n\nSimple: Is something consistent with linear algebra? it requires 17 simpleunit tests suffice to say so\n\nSo just let makes a test this rules are followed, and then a class thatapplies these behaviours and we have implemented it.\n\n## II I have linear algebra behaviour. How useful can it be?\n\nWell, you have basic data type like { x: 1, y :2, z :3 } that is actuallybehaving like an euclidean vector.\n\nIf an object is a MutableMapping thus we can create a universal operator forsaying how much an object «looks like» another one. Practical use :\n\n  * finding doublons in database;  * text matching (after a pass of ntlk + word counters);  * pattern fitting;\n\n...\n\nThat is the basis of Textual indexation and profiling (it is not only for evilpurpose) https://github.com/jul/ADictAdd _iction/blob/master/example/cos_demo.py\n\n## III State of the art of 2 working POC how to use MutableMapping (dict) andsuper\n\nMost of the operation tested here https://github.com/jul/ADictAdd_iction/\n\nImplementation as a trait here https://github.com/jul/archery\n\nBasically it works BUT :\n\n  1. it is hard : with archery I stumbled on super  2. with VectorDict (obsolete) it lacks of genericity and the code is clumsy  3. python 2 div behaviour was screwing this (and since these library were relying on base operator, I got biten)\n\nPrepare to throw 2 away\n\n## IV the future\n\nA chain is as strong as its weakest link : if a lib is based on composing thepython based operator, the algebra will be as consistent as the CORE behaviourof the operator in the language.\n\n## Conclusion\n\nAlgebra is a powerful abstraction that is still underused.\n\nPossible development : \\- Rieman/Hermitian algebra: using the power of themath used in Quantum Mechanics/relativity and python in the same fashion \\-Using Quaternion to have quirkless rotation in euclidean 3D...\n\n\nRoom: H.1308 (Rolin)\nScheduled start: 2017-02-04 10:30:00"
